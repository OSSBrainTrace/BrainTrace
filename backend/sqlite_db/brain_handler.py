"""
BrainHandler: Î∏åÎ†àÏù∏(ÏõåÌÅ¨Ïä§ÌéòÏù¥Ïä§) Í¥ÄÎ¶¨ Ìï∏Îì§Îü¨ (SQLite)
--------------------------------------------------

Ïù¥ Î™®ÎìàÏùÄ Î°úÏª¨ SQLite DBÎ•º ÏÇ¨Ïö©ÌïòÎäî **Î∏åÎ†àÏù∏(ÏûëÏóÖÍ≥µÍ∞Ñ) ÏóîÌã∞Ìã∞**Ïùò CRUD/Ïú†Ìã∏ Í∏∞Îä•ÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.
`BaseHandler`Ïùò `db_path`Î•º ÏÉÅÏÜçÎ∞õÏïÑ Ïó∞Í≤∞ÏùÑ Ïó¥Í≥†, Í¥ÄÎ†® ÌååÏùº/Ïó∞Í¥Ä ÌÖåÏù¥Î∏î Ï†ïÎ¶¨Î•º Ìè¨Ìï®Ìïú
ÏïàÏ†ÑÌïú ÏÇ≠Ï†ú Î°úÏßÅÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.

Íµ¨ÏÑ±/Ïó≠Ìï†
- create_brain(brain_name, created_at=None, deployment_type='local') -> dict
  - Brain Î†àÏΩîÎìúÎ•º ÏÉùÏÑ±ÌïòÍ≥† `{brain_id, brain_name, created_at, deployment_type, is_important}` Î∞òÌôò
  - `created_at` ÎØ∏ÏßÄÏ†ï Ïãú Ïò§Îäò ÎÇ†Ïßú(ISO)Î°ú ÏûêÎèô ÏÑ§Ï†ï

- delete_brain(brain_id) -> bool
  - Î∏åÎ†àÏù∏Í≥º **Ïó∞Í¥ÄÎêú Î°úÏª¨ ÌååÏùº**(Pdf.pdf_path, TextFile.txt_path)ÏùÑ Î®ºÏ†Ä ÏÇ≠Ï†ú
  - Ïù¥ÌõÑ DB ÎÇ¥ Ïó∞Í¥Ä Î†àÏΩîÎìú(Pdf/TextFile/Memo/ChatSession ‚Üí Brain) ÏàúÏÑúÎ°ú Ï†úÍ±∞
  - Ìä∏ÎûúÏû≠ÏÖòÏúºÎ°ú Î¨∂Ïñ¥ ÏùºÎ∂Ä Ïã§Ìå® Ïãú Î°§Î∞±
  - ÏµúÏ¢ÖÏ†ÅÏúºÎ°ú Brain ÏÇ≠Ï†ú Ïó¨Î∂ÄÎ•º boolÎ°ú Î∞òÌôò

- update_brain_name(brain_id, new_brain_name) -> bool
  - Î∏åÎ†àÏù∏ Ïù¥Î¶Ñ Î≥ÄÍ≤Ω

- update_brain_deployment_type(brain_id, deployment_type) -> bool
  - Î∏åÎ†àÏù∏ Î∞∞Ìè¨ Ïú†Ìòï(local/cloud Îì±) Î≥ÄÍ≤Ω

- get_brain(brain_id) -> dict | None
  - Îã®Ïùº Î∏åÎ†àÏù∏ Ï°∞Ìöå(ÏóÜÏúºÎ©¥ None)

- get_all_brains() -> List[dict]
  - Ï†ÑÏ≤¥ Î∏åÎ†àÏù∏ Î™©Î°ù Ï°∞Ìöå

- toggle_importance(brain_id) -> bool
  - Ï§ëÏöî ÌëúÏãú ÌîåÎûòÍ∑∏(is_important) ÌÜ†Í∏Ä

Ï†ÑÏ†ú Ï°∞Í±¥
- Ïä§ÌÇ§ÎßàÎäî `BaseHandler._init_db()`Ïóê ÏùòÌï¥ ÏÉùÏÑ±Îê®(Ïï± ÏãúÏûë Ïãú 1Ìöå Ìò∏Ï∂ú Í∂åÏû•).
- Brain Ïä§ÌÇ§Îßà: (brain_id INTEGER PK AUTOINCREMENT, brain_name TEXT, created_at TEXT,
  is_important BOOLEAN, deployment_type TEXT)

Ìä∏ÎûúÏû≠ÏÖò/Î¨¥Í≤∞ÏÑ±
- `delete_brain`ÏùÄ ÌååÏùº ÏÇ≠Ï†ú ‚Üí DB Ìä∏ÎûúÏû≠ÏÖò ÏàúÏúºÎ°ú ÏßÑÌñâ.
- Ï∞∏Ï°∞ Î¨¥Í≤∞ÏÑ±ÏùÄ FOREIGN KEY ÏÑ†Ïñ∏ÎêòÏñ¥ ÏûàÏúºÎÇò, SQLiteÏóêÏÑú Ïã§Ï†ú enforcementÎäî PRAGMA ÏÑ§Ï†ïÏóê ÏùòÏ°¥Ìï† Ïàò ÏûàÏùå.
  (ÌïÑÏöî Ïãú `PRAGMA foreign_keys=ON;` Í≥†Î†§)

Ï£ºÏùò/ÏïàÎÇ¥
- ÌååÏùº ÏÇ≠Ï†úÎäî OS I/O ÏòàÏô∏ Í∞ÄÎä• ‚Üí Ïã§Ìå® Ïãú Î°úÍ∑∏Îßå ÎÇ®Í∏∞Í≥† ÏßÑÌñâ.
- Îã§Ï§ë Ïä§Î†àÎìú/ÌîÑÎ°úÏÑ∏Ïä§ ÌôòÍ≤ΩÏóêÏÑúÏùò ÎèôÏãúÏÑ±ÏùÄ SQLite ÌäπÏÑ±Ïóê Ï£ºÏùò(WAL Î™®Îìú Í∂åÏû•, `BaseHandler._init_db` Ï∞∏Í≥†).
- ÏóêÎü¨Îäî Î°úÍπÖ ÌõÑ Ïû¨Ï†ÑÌåå(`RuntimeError` Îì±)ÎêòÏñ¥ ÏÉÅÏúÑ(Web Î†àÏù¥Ïñ¥)ÏóêÏÑú ÌëúÏ§Ä Ïò§Î•ò ÏùëÎãµÏúºÎ°ú Î≥ÄÌôòÌïòÎäî Ìå®ÌÑ¥ Í∂åÏû•.
"""

import sqlite3, logging, datetime
import os
from typing import List, Dict
from .base_handler import BaseHandler


class BrainHandler(BaseHandler):
    def create_brain(self, brain_name: str, created_at: str | None = None, deployment_type: str = 'local') -> dict:
        try:
            # created_at Í∏∞Î≥∏Í∞í: Ïò§Îäò
            if created_at is None:
                created_at = datetime.date.today().isoformat()   # '2025-05-07'

            conn = sqlite3.connect(self.db_path)
            cur  = conn.cursor()
            cur.execute(
                """INSERT INTO Brain
                     (brain_name, created_at, deployment_type)
                   VALUES (?, ?, ?)""",
                (
                    brain_name,
                    created_at,
                    deployment_type
                )
            )
            brain_id = cur.lastrowid
            conn.commit(); conn.close()

            return {
                "brain_id":   brain_id,
                "brain_name": brain_name,
                "created_at": created_at,
                "deployment_type": deployment_type,
                "is_important": False
            }
        except Exception as e:
            logging.error("Î∏åÎ†àÏù∏ ÏÉùÏÑ± Ïò§Î•ò: %s", e)
            raise
    
    def delete_brain(self, brain_id: int) -> bool:
        """Î∏åÎ†àÏù∏Í≥º Í¥ÄÎ†®Îêú Î™®Îì† Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú"""
        try:
            # 1. PDF/ÌÖçÏä§Ìä∏ ÌååÏùº Ïã§Ï†ú ÌååÏùº ÏÇ≠Ï†ú
            from .pdf_handler import PdfHandler
            from .textfile_handler import TextFileHandler
            pdf_handler = PdfHandler(self.db_path)
            textfile_handler = TextFileHandler(self.db_path)
            pdfs = pdf_handler.get_pdfs_by_brain(brain_id)
            txts = textfile_handler.get_textfiles_by_brain(brain_id)
            for pdf in pdfs:
                file_path = pdf.get('pdf_path')
                if file_path and os.path.exists(file_path):
                    try:
                        os.remove(file_path)
                        logging.info(f"‚úÖ PDF Î°úÏª¨ ÌååÏùº ÏÇ≠Ï†ú ÏôÑÎ£å: {file_path}")
                    except Exception as e:
                        logging.error(f"‚ùå PDF ÌååÏùº ÏÇ≠Ï†ú Ïã§Ìå®: {file_path}, {e}")
            for txt in txts:
                file_path = txt.get('txt_path')
                if file_path and os.path.exists(file_path):
                    try:
                        os.remove(file_path)
                        logging.info(f"‚úÖ TXT Î°úÏª¨ ÌååÏùº ÏÇ≠Ï†ú ÏôÑÎ£å: {file_path}")
                    except Exception as e:
                        logging.error(f"‚ùå TXT ÌååÏùº ÏÇ≠Ï†ú Ïã§Ìå®: {file_path}, {e}")

            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # Ìä∏ÎûúÏû≠ÏÖò ÏãúÏûë
            cursor.execute("BEGIN TRANSACTION")
            
            try:
                logging.info("üßπ Pdf ÌÖåÏù¥Î∏îÏóêÏÑú brain_id=%s ÏÇ≠Ï†ú ÏãúÎèÑ", brain_id)
                cursor.execute("DELETE FROM Pdf WHERE brain_id = ?", (brain_id,))
                
                logging.info("üßπ TextFile ÌÖåÏù¥Î∏îÏóêÏÑú brain_id=%s ÏÇ≠Ï†ú ÏãúÎèÑ", brain_id)
                cursor.execute("DELETE FROM TextFile WHERE brain_id = ?", (brain_id,))

                logging.info("üßπ Memo ÌÖåÏù¥Î∏îÏóêÏÑú brain_id=%s ÏÇ≠Ï†ú ÏãúÎèÑ", brain_id)
                cursor.execute("DELETE FROM Memo WHERE brain_id = ?", (brain_id,))
                
                logging.info("üßπ ChatSession ÌÖåÏù¥Î∏îÏóêÏÑú brain_id=%s ÏÇ≠Ï†ú ÏãúÎèÑ", brain_id)
                cursor.execute("DELETE FROM ChatSession WHERE brain_id = ?", (brain_id,))
                
                logging.info("üßπ Brain ÌÖåÏù¥Î∏îÏóêÏÑú brain_id=%s ÏÇ≠Ï†ú ÏãúÎèÑ", brain_id)
                cursor.execute("DELETE FROM Brain WHERE brain_id = ?", (brain_id,))
                deleted = cursor.rowcount > 0
                
                conn.commit()
                
                if deleted:
                    logging.info("‚úÖ Î∏åÎ†àÏù∏ Î∞è Í¥ÄÎ†® Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú ÏôÑÎ£å: brain_id=%s", brain_id)
                else:
                    logging.warning("‚ö†Ô∏è Î∏åÎ†àÏù∏ ÏÇ≠Ï†ú Ïã§Ìå®: Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî brain_id=%s", brain_id)
                
                return deleted
            
            except Exception as e:
                conn.rollback()
                logging.error("‚ùå DELETE Ï§ë Ïò§Î•ò Î∞úÏÉù: %s", str(e))
                raise e
            
            finally:
                conn.close()
        
        except Exception as e:
            logging.error("‚ùå Î∏åÎ†àÏù∏ ÏÇ≠Ï†ú Ïò§Î•ò: %s", str(e))
            raise RuntimeError(f"Î∏åÎ†àÏù∏ ÏÇ≠Ï†ú Ïò§Î•ò: {str(e)}")

    def update_brain_name(self, brain_id: int, new_brain_name: str) -> bool:
        """Î∏åÎ†àÏù∏ Ïù¥Î¶Ñ ÏóÖÎç∞Ïù¥Ìä∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute(
                "UPDATE Brain SET brain_name = ? WHERE brain_id = ?",
                (new_brain_name, brain_id)
            )
            updated = cursor.rowcount > 0
            
            conn.commit()
            conn.close()
            
            if updated:
                logging.info("Î∏åÎ†àÏù∏ Ïù¥Î¶Ñ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å: brain_id=%s, new_brain_name=%s", brain_id, new_brain_name)
            else:
                logging.warning("Î∏åÎ†àÏù∏ Ïù¥Î¶Ñ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®: Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî brain_id=%s", brain_id)
            
            return updated
        except Exception as e:
            logging.error("Î∏åÎ†àÏù∏ Ïù¥Î¶Ñ ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò: %s", str(e))
            raise RuntimeError(f"Î∏åÎ†àÏù∏ Ïù¥Î¶Ñ ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò: {str(e)}")
    
    def update_brain_deployment_type(self, brain_id: int, deployment_type: str) -> bool:
        """Î∏åÎ†àÏù∏ Î∞∞Ìè¨ ÌÉÄÏûÖ ÏóÖÎç∞Ïù¥Ìä∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute(
                "UPDATE Brain SET deployment_type = ? WHERE brain_id = ?",
                (deployment_type, brain_id)
            )
            updated = cursor.rowcount > 0
            
            conn.commit()
            conn.close()
            
            if updated:
                logging.info("Î∏åÎ†àÏù∏ Î∞∞Ìè¨ ÌÉÄÏûÖ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å: brain_id=%s, deployment_type=%s", brain_id, deployment_type)
            else:
                logging.warning("Î∏åÎ†àÏù∏ Î∞∞Ìè¨ ÌÉÄÏûÖ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®: Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî brain_id=%s", brain_id)
            
            return updated
        except Exception as e:
            logging.error("Î∏åÎ†àÏù∏ Î∞∞Ìè¨ ÌÉÄÏûÖ ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò: %s", str(e))
            raise RuntimeError(f"Î∏åÎ†àÏù∏ Î∞∞Ìè¨ ÌÉÄÏûÖ ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò: {str(e)}")

    def get_brain(self, brain_id: int) -> dict | None:
        try:
            conn = sqlite3.connect(self.db_path)
            cur  = conn.cursor()
            cur.execute(
                """SELECT brain_id, brain_name, created_at, is_important, deployment_type
                   FROM Brain WHERE brain_id=?""",
                (brain_id,)
            )
            row = cur.fetchone()
            conn.close()
            if not row:
                return None
            return {
                "brain_id":   row[0],
                "brain_name": row[1],
                "created_at": row[2],
                "is_important": bool(row[3]) if row[3] is not None else False,
                "deployment_type": row[4] if row[4] is not None else 'local',
            }
        except Exception as e:
            logging.error("Î∏åÎ†àÏù∏ Ï°∞Ìöå Ïò§Î•ò: %s", e)
            return None
         
    def get_all_brains(self) -> List[dict]:
        """ÏãúÏä§ÌÖúÏùò Î™®Îì† Î∏åÎ†àÏù∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cur  = conn.cursor()
            cur.execute(
                """SELECT brain_id, brain_name, created_at, is_important, deployment_type
                     FROM Brain"""
            )
            rows = cur.fetchall(); conn.close()
            return [
                {
                    "brain_id":   r[0],
                    "brain_name": r[1],
                    "created_at": r[2],
                    "is_important": bool(r[3]) if r[3] is not None else False,
                    "deployment_type": r[4] if r[4] is not None else 'local',
                } for r in rows
            ]
        except Exception as e:
            logging.error("Î∏åÎ†àÏù∏ Î™©Î°ù Ï°∞Ìöå Ïò§Î•ò: %s", e)
            return []

    def toggle_importance(self, brain_id: int) -> bool:
        """Î∏åÎ†àÏù∏ Ï§ëÏöîÎèÑ ÌÜ†Í∏Ä"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # ÌòÑÏû¨ Ï§ëÏöîÎèÑ ÏÉÅÌÉú ÌôïÏù∏
            cursor.execute(
                "SELECT is_important FROM Brain WHERE brain_id = ?",
                (brain_id,)
            )
            row = cursor.fetchone()
            
            if not row:
                conn.close()
                return False
            
            current_importance = bool(row[0]) if row[0] is not None else False
            new_importance = not current_importance
            
            # Ï§ëÏöîÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
            cursor.execute(
                "UPDATE Brain SET is_important = ? WHERE brain_id = ?",
                (new_importance, brain_id)
            )
            updated = cursor.rowcount > 0
            
            conn.commit()
            conn.close()
            
            if updated:
                logging.info("Î∏åÎ†àÏù∏ Ï§ëÏöîÎèÑ ÌÜ†Í∏Ä ÏôÑÎ£å: brain_id=%s, is_important=%s", brain_id, new_importance)
            else:
                logging.warning("Î∏åÎ†àÏù∏ Ï§ëÏöîÎèÑ ÌÜ†Í∏Ä Ïã§Ìå®: Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî brain_id=%s", brain_id)
            
            return updated
        except Exception as e:
            logging.error("Î∏åÎ†àÏù∏ Ï§ëÏöîÎèÑ ÌÜ†Í∏Ä Ïò§Î•ò: %s", str(e))
            raise RuntimeError(f"Î∏åÎ†àÏù∏ Ï§ëÏöîÎèÑ ÌÜ†Í∏Ä Ïò§Î•ò: {str(e)}") 